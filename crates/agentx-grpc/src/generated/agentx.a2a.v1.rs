// This file is @generated by prost-build.
/// A2A消息定义
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct A2aMessage {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(enumeration = "MessageRole", tag = "3")]
    pub role: i32,
    #[prost(message, repeated, tag = "4")]
    pub parts: ::prost::alloc::vec::Vec<MessagePart>,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "6")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// 消息部分
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessagePart {
    #[prost(oneof = "message_part::Content", tags = "1, 2, 3, 4")]
    pub content: ::core::option::Option<message_part::Content>,
}
/// Nested message and enum types in `MessagePart`.
pub mod message_part {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(message, tag = "1")]
        Text(super::TextPart),
        #[prost(message, tag = "2")]
        File(super::FilePart),
        #[prost(message, tag = "3")]
        Data(super::DataPart),
        #[prost(message, tag = "4")]
        ToolCall(super::ToolCallPart),
    }
}
/// 文本部分
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextPart {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 文件部分
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilePart {
    #[prost(message, optional, tag = "1")]
    pub file: ::core::option::Option<FileData>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 文件数据
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileData {
    #[prost(oneof = "file_data::Data", tags = "1, 2")]
    pub data: ::core::option::Option<file_data::Data>,
}
/// Nested message and enum types in `FileData`.
pub mod file_data {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "1")]
        WithBytes(super::FileWithBytes),
        #[prost(message, tag = "2")]
        WithUri(super::FileWithUri),
    }
}
/// 带字节的文件
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileWithBytes {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub mime_type: ::prost::alloc::string::String,
    /// base64编码
    #[prost(string, tag = "3")]
    pub bytes: ::prost::alloc::string::String,
}
/// 带URI的文件
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileWithUri {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub mime_type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub uri: ::prost::alloc::string::String,
}
/// 数据部分
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataPart {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 工具调用部分
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToolCallPart {
    #[prost(string, tag = "1")]
    pub tool_call_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub function_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub arguments: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 发送消息请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMessageRequest {
    #[prost(message, optional, tag = "1")]
    pub message: ::core::option::Option<A2aMessage>,
    #[prost(string, tag = "2")]
    pub target_agent_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub routing_hint: ::core::option::Option<::prost::alloc::string::String>,
}
/// 发送消息响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMessageResponse {
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    #[prost(enumeration = "MessageStatus", tag = "2")]
    pub status: i32,
    #[prost(string, optional, tag = "3")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 接收消息请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReceiveMessagesRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub conversation_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub since: ::core::option::Option<::prost_types::Timestamp>,
}
/// 任务定义
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct A2aTask {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub kind: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub context_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub status: ::core::option::Option<TaskStatus>,
    #[prost(message, repeated, tag = "5")]
    pub history: ::prost::alloc::vec::Vec<A2aMessage>,
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 任务状态
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskStatus {
    #[prost(enumeration = "TaskState", tag = "1")]
    pub state: i32,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "3")]
    pub progress: ::core::option::Option<f64>,
    #[prost(message, optional, tag = "4")]
    pub estimated_completion: ::core::option::Option<::prost_types::Timestamp>,
}
/// 提交任务请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTaskRequest {
    #[prost(string, tag = "1")]
    pub kind: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub context_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub initial_message: ::core::option::Option<A2aMessage>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 提交任务响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTaskResponse {
    #[prost(message, optional, tag = "1")]
    pub task: ::core::option::Option<A2aTask>,
}
/// 获取任务状态请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskStatusRequest {
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
}
/// 获取任务状态响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskStatusResponse {
    #[prost(message, optional, tag = "1")]
    pub task: ::core::option::Option<A2aTask>,
}
/// 取消任务请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelTaskRequest {
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// 取消任务响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelTaskResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 消息角色
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageRole {
    Unspecified = 0,
    User = 1,
    Agent = 2,
    System = 3,
}
impl MessageRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MessageRole::Unspecified => "MESSAGE_ROLE_UNSPECIFIED",
            MessageRole::User => "MESSAGE_ROLE_USER",
            MessageRole::Agent => "MESSAGE_ROLE_AGENT",
            MessageRole::System => "MESSAGE_ROLE_SYSTEM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_ROLE_UNSPECIFIED" => Some(Self::Unspecified),
            "MESSAGE_ROLE_USER" => Some(Self::User),
            "MESSAGE_ROLE_AGENT" => Some(Self::Agent),
            "MESSAGE_ROLE_SYSTEM" => Some(Self::System),
            _ => None,
        }
    }
}
/// 消息状态
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageStatus {
    Unspecified = 0,
    Sent = 1,
    Delivered = 2,
    Failed = 3,
    Processing = 4,
}
impl MessageStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MessageStatus::Unspecified => "MESSAGE_STATUS_UNSPECIFIED",
            MessageStatus::Sent => "MESSAGE_STATUS_SENT",
            MessageStatus::Delivered => "MESSAGE_STATUS_DELIVERED",
            MessageStatus::Failed => "MESSAGE_STATUS_FAILED",
            MessageStatus::Processing => "MESSAGE_STATUS_PROCESSING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "MESSAGE_STATUS_SENT" => Some(Self::Sent),
            "MESSAGE_STATUS_DELIVERED" => Some(Self::Delivered),
            "MESSAGE_STATUS_FAILED" => Some(Self::Failed),
            "MESSAGE_STATUS_PROCESSING" => Some(Self::Processing),
            _ => None,
        }
    }
}
/// 任务状态枚举
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskState {
    Unspecified = 0,
    Submitted = 1,
    InProgress = 2,
    Completed = 3,
    Failed = 4,
    Cancelled = 5,
    InputRequired = 6,
}
impl TaskState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TaskState::Unspecified => "TASK_STATE_UNSPECIFIED",
            TaskState::Submitted => "TASK_STATE_SUBMITTED",
            TaskState::InProgress => "TASK_STATE_IN_PROGRESS",
            TaskState::Completed => "TASK_STATE_COMPLETED",
            TaskState::Failed => "TASK_STATE_FAILED",
            TaskState::Cancelled => "TASK_STATE_CANCELLED",
            TaskState::InputRequired => "TASK_STATE_INPUT_REQUIRED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "TASK_STATE_SUBMITTED" => Some(Self::Submitted),
            "TASK_STATE_IN_PROGRESS" => Some(Self::InProgress),
            "TASK_STATE_COMPLETED" => Some(Self::Completed),
            "TASK_STATE_FAILED" => Some(Self::Failed),
            "TASK_STATE_CANCELLED" => Some(Self::Cancelled),
            "TASK_STATE_INPUT_REQUIRED" => Some(Self::InputRequired),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod a2a_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// A2A协议gRPC服务定义
    #[derive(Debug, Clone)]
    pub struct A2aServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl A2aServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> A2aServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> A2aServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            A2aServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 发送A2A消息
        pub async fn send_message(
            &mut self,
            request: impl tonic::IntoRequest<super::SendMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SendMessageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/SendMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "SendMessage"));
            self.inner.unary(req, path, codec).await
        }
        /// 接收A2A消息流
        pub async fn receive_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::ReceiveMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::A2aMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/ReceiveMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "ReceiveMessages"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// 提交任务
        pub async fn submit_task(
            &mut self,
            request: impl tonic::IntoRequest<super::SubmitTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/SubmitTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "SubmitTask"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取任务状态
        pub async fn get_task_status(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTaskStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/GetTaskStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "GetTaskStatus"));
            self.inner.unary(req, path, codec).await
        }
        /// 取消任务
        pub async fn cancel_task(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/CancelTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "CancelTask"));
            self.inner.unary(req, path, codec).await
        }
        /// 双向消息流
        pub async fn message_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::A2aMessage>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::A2aMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.a2a.v1.A2AService/MessageStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("agentx.a2a.v1.A2AService", "MessageStream"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod a2a_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with A2aServiceServer.
    #[async_trait]
    pub trait A2aService: Send + Sync + 'static {
        /// 发送A2A消息
        async fn send_message(
            &self,
            request: tonic::Request<super::SendMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SendMessageResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the ReceiveMessages method.
        type ReceiveMessagesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::A2aMessage, tonic::Status>,
            >
            + Send
            + 'static;
        /// 接收A2A消息流
        async fn receive_messages(
            &self,
            request: tonic::Request<super::ReceiveMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::ReceiveMessagesStream>,
            tonic::Status,
        >;
        /// 提交任务
        async fn submit_task(
            &self,
            request: tonic::Request<super::SubmitTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SubmitTaskResponse>,
            tonic::Status,
        >;
        /// 获取任务状态
        async fn get_task_status(
            &self,
            request: tonic::Request<super::GetTaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTaskStatusResponse>,
            tonic::Status,
        >;
        /// 取消任务
        async fn cancel_task(
            &self,
            request: tonic::Request<super::CancelTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelTaskResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the MessageStream method.
        type MessageStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::A2aMessage, tonic::Status>,
            >
            + Send
            + 'static;
        /// 双向消息流
        async fn message_stream(
            &self,
            request: tonic::Request<tonic::Streaming<super::A2aMessage>>,
        ) -> std::result::Result<
            tonic::Response<Self::MessageStreamStream>,
            tonic::Status,
        >;
    }
    /// A2A协议gRPC服务定义
    #[derive(Debug)]
    pub struct A2aServiceServer<T: A2aService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: A2aService> A2aServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for A2aServiceServer<T>
    where
        T: A2aService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/agentx.a2a.v1.A2AService/SendMessage" => {
                    #[allow(non_camel_case_types)]
                    struct SendMessageSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::UnaryService<super::SendMessageRequest>
                    for SendMessageSvc<T> {
                        type Response = super::SendMessageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::send_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SendMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.a2a.v1.A2AService/ReceiveMessages" => {
                    #[allow(non_camel_case_types)]
                    struct ReceiveMessagesSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::ServerStreamingService<
                        super::ReceiveMessagesRequest,
                    > for ReceiveMessagesSvc<T> {
                        type Response = super::A2aMessage;
                        type ResponseStream = T::ReceiveMessagesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReceiveMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::receive_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ReceiveMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.a2a.v1.A2AService/SubmitTask" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitTaskSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::UnaryService<super::SubmitTaskRequest>
                    for SubmitTaskSvc<T> {
                        type Response = super::SubmitTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubmitTaskRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::submit_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubmitTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.a2a.v1.A2AService/GetTaskStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetTaskStatusSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::UnaryService<super::GetTaskStatusRequest>
                    for GetTaskStatusSvc<T> {
                        type Response = super::GetTaskStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTaskStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::get_task_status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTaskStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.a2a.v1.A2AService/CancelTask" => {
                    #[allow(non_camel_case_types)]
                    struct CancelTaskSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::UnaryService<super::CancelTaskRequest>
                    for CancelTaskSvc<T> {
                        type Response = super::CancelTaskResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelTaskRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::cancel_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CancelTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.a2a.v1.A2AService/MessageStream" => {
                    #[allow(non_camel_case_types)]
                    struct MessageStreamSvc<T: A2aService>(pub Arc<T>);
                    impl<
                        T: A2aService,
                    > tonic::server::StreamingService<super::A2aMessage>
                    for MessageStreamSvc<T> {
                        type Response = super::A2aMessage;
                        type ResponseStream = T::MessageStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::A2aMessage>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as A2aService>::message_stream(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = MessageStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: A2aService> Clone for A2aServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: A2aService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: A2aService> tonic::server::NamedService for A2aServiceServer<T> {
        const NAME: &'static str = "agentx.a2a.v1.A2AService";
    }
}
