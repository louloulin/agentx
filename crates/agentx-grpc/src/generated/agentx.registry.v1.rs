// This file is @generated by prost-build.
/// Agent Card定义
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AgentCard {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub capabilities: ::prost::alloc::vec::Vec<Capability>,
    #[prost(message, repeated, tag = "6")]
    pub endpoints: ::prost::alloc::vec::Vec<Endpoint>,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub expires_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration = "AgentStatus", tag = "11")]
    pub status: i32,
    #[prost(string, repeated, tag = "12")]
    pub supported_versions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "13")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "InteractionModality", repeated, tag = "14")]
    pub interaction_modalities: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "15")]
    pub ux_capabilities: ::core::option::Option<UxCapabilities>,
    #[prost(enumeration = "TrustLevel", tag = "16")]
    pub trust_level: i32,
    #[prost(string, repeated, tag = "17")]
    pub supported_task_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Agent能力
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Capability {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(enumeration = "CapabilityType", tag = "3")]
    pub r#type: i32,
    #[prost(bool, tag = "4")]
    pub available: bool,
    #[prost(message, optional, tag = "5")]
    pub input_schema: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "6")]
    pub output_schema: ::core::option::Option<::prost_types::Struct>,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// Agent端点
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Endpoint {
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub protocol: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub auth: ::core::option::Option<AuthInfo>,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<::prost_types::Struct>,
}
/// 认证信息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthInfo {
    #[prost(string, tag = "1")]
    pub auth_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub parameters: ::core::option::Option<::prost_types::Struct>,
}
/// UX能力
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UxCapabilities {
    #[prost(string, repeated, tag = "1")]
    pub supported_components: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub dynamic_adaptation: bool,
    #[prost(bool, tag = "3")]
    pub multimodal_support: bool,
    #[prost(string, repeated, tag = "4")]
    pub custom_protocols: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// 注册Agent请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterAgentRequest {
    #[prost(message, optional, tag = "1")]
    pub agent_card: ::core::option::Option<AgentCard>,
}
/// 注册Agent响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterAgentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 注销Agent请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterAgentRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
}
/// 注销Agent响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterAgentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 更新Agent状态请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAgentStatusRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(enumeration = "AgentStatus", tag = "2")]
    pub status: i32,
    #[prost(string, optional, tag = "3")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 更新Agent状态响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAgentStatusResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, optional, tag = "2")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 获取Agent请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAgentRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
}
/// 获取Agent响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAgentResponse {
    #[prost(message, optional, tag = "1")]
    pub agent_card: ::core::option::Option<AgentCard>,
}
/// 列出Agent请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAgentsRequest {
    #[prost(enumeration = "AgentStatus", optional, tag = "1")]
    pub status_filter: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub capability_filter: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "TrustLevel", optional, tag = "3")]
    pub trust_level_filter: ::core::option::Option<i32>,
    #[prost(int32, tag = "4")]
    pub page_size: i32,
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
}
/// 列出Agent响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAgentsResponse {
    #[prost(message, repeated, tag = "1")]
    pub agents: ::prost::alloc::vec::Vec<AgentCard>,
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub total_count: i32,
}
/// 发现Agent请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoverAgentsRequest {
    #[prost(string, repeated, tag = "1")]
    pub required_capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "TrustLevel", optional, tag = "2")]
    pub min_trust_level: ::core::option::Option<i32>,
    #[prost(enumeration = "InteractionModality", repeated, tag = "3")]
    pub required_modalities: ::prost::alloc::vec::Vec<i32>,
    #[prost(string, repeated, tag = "4")]
    pub task_types: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub filters: ::core::option::Option<::prost_types::Struct>,
}
/// 发现Agent响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscoverAgentsResponse {
    #[prost(message, repeated, tag = "1")]
    pub matching_agents: ::prost::alloc::vec::Vec<AgentCard>,
    #[prost(int32, tag = "2")]
    pub total_matches: i32,
}
/// 心跳请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    #[prost(string, tag = "1")]
    pub agent_id: ::prost::alloc::string::String,
    #[prost(enumeration = "AgentStatus", tag = "2")]
    pub status: i32,
    #[prost(message, optional, tag = "3")]
    pub metrics: ::core::option::Option<::prost_types::Struct>,
}
/// 心跳响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    #[prost(bool, tag = "1")]
    pub acknowledged: bool,
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
/// 获取能力请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCapabilitiesRequest {
    #[prost(string, optional, tag = "1")]
    pub agent_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "CapabilityType", optional, tag = "2")]
    pub capability_type: ::core::option::Option<i32>,
}
/// 获取能力响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCapabilitiesResponse {
    #[prost(message, repeated, tag = "1")]
    pub capabilities: ::prost::alloc::vec::Vec<Capability>,
    #[prost(message, optional, tag = "2")]
    pub system_capabilities: ::core::option::Option<::prost_types::Struct>,
}
/// 能力类型
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CapabilityType {
    Unspecified = 0,
    TextGeneration = 1,
    ImageProcessing = 2,
    AudioProcessing = 3,
    VideoProcessing = 4,
    DataAnalysis = 5,
    CodeExecution = 6,
    FileProcessing = 7,
    WebSearch = 8,
    Custom = 9,
}
impl CapabilityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CapabilityType::Unspecified => "CAPABILITY_TYPE_UNSPECIFIED",
            CapabilityType::TextGeneration => "CAPABILITY_TYPE_TEXT_GENERATION",
            CapabilityType::ImageProcessing => "CAPABILITY_TYPE_IMAGE_PROCESSING",
            CapabilityType::AudioProcessing => "CAPABILITY_TYPE_AUDIO_PROCESSING",
            CapabilityType::VideoProcessing => "CAPABILITY_TYPE_VIDEO_PROCESSING",
            CapabilityType::DataAnalysis => "CAPABILITY_TYPE_DATA_ANALYSIS",
            CapabilityType::CodeExecution => "CAPABILITY_TYPE_CODE_EXECUTION",
            CapabilityType::FileProcessing => "CAPABILITY_TYPE_FILE_PROCESSING",
            CapabilityType::WebSearch => "CAPABILITY_TYPE_WEB_SEARCH",
            CapabilityType::Custom => "CAPABILITY_TYPE_CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CAPABILITY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "CAPABILITY_TYPE_TEXT_GENERATION" => Some(Self::TextGeneration),
            "CAPABILITY_TYPE_IMAGE_PROCESSING" => Some(Self::ImageProcessing),
            "CAPABILITY_TYPE_AUDIO_PROCESSING" => Some(Self::AudioProcessing),
            "CAPABILITY_TYPE_VIDEO_PROCESSING" => Some(Self::VideoProcessing),
            "CAPABILITY_TYPE_DATA_ANALYSIS" => Some(Self::DataAnalysis),
            "CAPABILITY_TYPE_CODE_EXECUTION" => Some(Self::CodeExecution),
            "CAPABILITY_TYPE_FILE_PROCESSING" => Some(Self::FileProcessing),
            "CAPABILITY_TYPE_WEB_SEARCH" => Some(Self::WebSearch),
            "CAPABILITY_TYPE_CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// Agent状态
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AgentStatus {
    Unspecified = 0,
    Online = 1,
    Offline = 2,
    Busy = 3,
    Maintenance = 4,
    Error = 5,
}
impl AgentStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AgentStatus::Unspecified => "AGENT_STATUS_UNSPECIFIED",
            AgentStatus::Online => "AGENT_STATUS_ONLINE",
            AgentStatus::Offline => "AGENT_STATUS_OFFLINE",
            AgentStatus::Busy => "AGENT_STATUS_BUSY",
            AgentStatus::Maintenance => "AGENT_STATUS_MAINTENANCE",
            AgentStatus::Error => "AGENT_STATUS_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AGENT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "AGENT_STATUS_ONLINE" => Some(Self::Online),
            "AGENT_STATUS_OFFLINE" => Some(Self::Offline),
            "AGENT_STATUS_BUSY" => Some(Self::Busy),
            "AGENT_STATUS_MAINTENANCE" => Some(Self::Maintenance),
            "AGENT_STATUS_ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
/// 交互模式
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InteractionModality {
    Unspecified = 0,
    Text = 1,
    Forms = 2,
    Media = 3,
    Files = 4,
    Streaming = 5,
    Custom = 6,
}
impl InteractionModality {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            InteractionModality::Unspecified => "INTERACTION_MODALITY_UNSPECIFIED",
            InteractionModality::Text => "INTERACTION_MODALITY_TEXT",
            InteractionModality::Forms => "INTERACTION_MODALITY_FORMS",
            InteractionModality::Media => "INTERACTION_MODALITY_MEDIA",
            InteractionModality::Files => "INTERACTION_MODALITY_FILES",
            InteractionModality::Streaming => "INTERACTION_MODALITY_STREAMING",
            InteractionModality::Custom => "INTERACTION_MODALITY_CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INTERACTION_MODALITY_UNSPECIFIED" => Some(Self::Unspecified),
            "INTERACTION_MODALITY_TEXT" => Some(Self::Text),
            "INTERACTION_MODALITY_FORMS" => Some(Self::Forms),
            "INTERACTION_MODALITY_MEDIA" => Some(Self::Media),
            "INTERACTION_MODALITY_FILES" => Some(Self::Files),
            "INTERACTION_MODALITY_STREAMING" => Some(Self::Streaming),
            "INTERACTION_MODALITY_CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// 信任级别
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrustLevel {
    Unspecified = 0,
    Public = 1,
    Verified = 2,
    Trusted = 3,
    Internal = 4,
}
impl TrustLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TrustLevel::Unspecified => "TRUST_LEVEL_UNSPECIFIED",
            TrustLevel::Public => "TRUST_LEVEL_PUBLIC",
            TrustLevel::Verified => "TRUST_LEVEL_VERIFIED",
            TrustLevel::Trusted => "TRUST_LEVEL_TRUSTED",
            TrustLevel::Internal => "TRUST_LEVEL_INTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRUST_LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
            "TRUST_LEVEL_PUBLIC" => Some(Self::Public),
            "TRUST_LEVEL_VERIFIED" => Some(Self::Verified),
            "TRUST_LEVEL_TRUSTED" => Some(Self::Trusted),
            "TRUST_LEVEL_INTERNAL" => Some(Self::Internal),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod agent_registry_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Agent注册服务
    #[derive(Debug, Clone)]
    pub struct AgentRegistryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AgentRegistryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AgentRegistryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AgentRegistryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AgentRegistryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 注册Agent
        pub async fn register_agent(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterAgentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/RegisterAgent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "RegisterAgent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 注销Agent
        pub async fn unregister_agent(
            &mut self,
            request: impl tonic::IntoRequest<super::UnregisterAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterAgentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/UnregisterAgent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "UnregisterAgent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 更新Agent状态
        pub async fn update_agent_status(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateAgentStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateAgentStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/UpdateAgentStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "UpdateAgentStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取Agent信息
        pub async fn get_agent(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAgentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/GetAgent",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "GetAgent",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 列出Agent
        pub async fn list_agents(
            &mut self,
            request: impl tonic::IntoRequest<super::ListAgentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAgentsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/ListAgents",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "ListAgents",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 发现Agent
        pub async fn discover_agents(
            &mut self,
            request: impl tonic::IntoRequest<super::DiscoverAgentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DiscoverAgentsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/DiscoverAgents",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "DiscoverAgents",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Agent心跳
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "Heartbeat",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 获取Agent能力
        pub async fn get_capabilities(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCapabilitiesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCapabilitiesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/agentx.registry.v1.AgentRegistryService/GetCapabilities",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "agentx.registry.v1.AgentRegistryService",
                        "GetCapabilities",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod agent_registry_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AgentRegistryServiceServer.
    #[async_trait]
    pub trait AgentRegistryService: Send + Sync + 'static {
        /// 注册Agent
        async fn register_agent(
            &self,
            request: tonic::Request<super::RegisterAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterAgentResponse>,
            tonic::Status,
        >;
        /// 注销Agent
        async fn unregister_agent(
            &self,
            request: tonic::Request<super::UnregisterAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterAgentResponse>,
            tonic::Status,
        >;
        /// 更新Agent状态
        async fn update_agent_status(
            &self,
            request: tonic::Request<super::UpdateAgentStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateAgentStatusResponse>,
            tonic::Status,
        >;
        /// 获取Agent信息
        async fn get_agent(
            &self,
            request: tonic::Request<super::GetAgentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAgentResponse>,
            tonic::Status,
        >;
        /// 列出Agent
        async fn list_agents(
            &self,
            request: tonic::Request<super::ListAgentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAgentsResponse>,
            tonic::Status,
        >;
        /// 发现Agent
        async fn discover_agents(
            &self,
            request: tonic::Request<super::DiscoverAgentsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DiscoverAgentsResponse>,
            tonic::Status,
        >;
        /// Agent心跳
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
        /// 获取Agent能力
        async fn get_capabilities(
            &self,
            request: tonic::Request<super::GetCapabilitiesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCapabilitiesResponse>,
            tonic::Status,
        >;
    }
    /// Agent注册服务
    #[derive(Debug)]
    pub struct AgentRegistryServiceServer<T: AgentRegistryService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: AgentRegistryService> AgentRegistryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for AgentRegistryServiceServer<T>
    where
        T: AgentRegistryService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/agentx.registry.v1.AgentRegistryService/RegisterAgent" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterAgentSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::RegisterAgentRequest>
                    for RegisterAgentSvc<T> {
                        type Response = super::RegisterAgentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterAgentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::register_agent(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RegisterAgentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/UnregisterAgent" => {
                    #[allow(non_camel_case_types)]
                    struct UnregisterAgentSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::UnregisterAgentRequest>
                    for UnregisterAgentSvc<T> {
                        type Response = super::UnregisterAgentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnregisterAgentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::unregister_agent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UnregisterAgentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/UpdateAgentStatus" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateAgentStatusSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::UpdateAgentStatusRequest>
                    for UpdateAgentStatusSvc<T> {
                        type Response = super::UpdateAgentStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateAgentStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::update_agent_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateAgentStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/GetAgent" => {
                    #[allow(non_camel_case_types)]
                    struct GetAgentSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::GetAgentRequest>
                    for GetAgentSvc<T> {
                        type Response = super::GetAgentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAgentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::get_agent(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetAgentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/ListAgents" => {
                    #[allow(non_camel_case_types)]
                    struct ListAgentsSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::ListAgentsRequest>
                    for ListAgentsSvc<T> {
                        type Response = super::ListAgentsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListAgentsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::list_agents(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListAgentsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/DiscoverAgents" => {
                    #[allow(non_camel_case_types)]
                    struct DiscoverAgentsSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::DiscoverAgentsRequest>
                    for DiscoverAgentsSvc<T> {
                        type Response = super::DiscoverAgentsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DiscoverAgentsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::discover_agents(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DiscoverAgentsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::heartbeat(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/agentx.registry.v1.AgentRegistryService/GetCapabilities" => {
                    #[allow(non_camel_case_types)]
                    struct GetCapabilitiesSvc<T: AgentRegistryService>(pub Arc<T>);
                    impl<
                        T: AgentRegistryService,
                    > tonic::server::UnaryService<super::GetCapabilitiesRequest>
                    for GetCapabilitiesSvc<T> {
                        type Response = super::GetCapabilitiesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCapabilitiesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AgentRegistryService>::get_capabilities(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCapabilitiesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: AgentRegistryService> Clone for AgentRegistryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: AgentRegistryService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: AgentRegistryService> tonic::server::NamedService
    for AgentRegistryServiceServer<T> {
        const NAME: &'static str = "agentx.registry.v1.AgentRegistryService";
    }
}
